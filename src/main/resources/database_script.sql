-- =========================================================================
-- PROJETO: Plataforma HumanLink - Banco de Dados
-- DESCRIÇÃO: Script completo com criação de sequência, tabelas, triggers,
-- inserts e consultas SQL para o projeto HumanLink.
-- =========================================================================



-- ====================================================
-- #      REMOÇÃO AUTOMÁTICA DE TODAS AS TABELAS     #
-- ===================================================

BEGIN
   FOR t IN (SELECT table_name FROM user_tables) LOOP
      EXECUTE IMMEDIATE 'DROP TABLE "' || t.table_name || '" CASCADE CONSTRAINTS';
   END LOOP;
END;
/


-- =======================================
-- #  DROP DE SEQUÊNCIAS (ORDEM SEGURA)  #
-- =======================================

-- Sequências das tabelas mais dependentes primeiro
DROP SEQUENCE seq_usuario;
DROP SEQUENCE seq_login;
DROP SEQUENCE seq_campanha_humanitaria;
DROP SEQUENCE seq_registro_doacao;
DROP SEQUENCE seq_notificacao;
DROP SEQUENCE seq_relato;
DROP SEQUENCE seq_area_desastre;
DROP SEQUENCE seq_localizacao_registrada;
DROP SEQUENCE seq_registro_voluntario;



-- ====================================
-- #  SEQUÊNCIAS (AUTO-INCREMENTO)   #
-- ====================================


CREATE SEQUENCE seq_usuario START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_login START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_campanha_humanitaria START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_registro_doacao START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_notificacao START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_relato START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_area_desastre START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_localizacao_registrada START WITH 6 INCREMENT BY 1;
CREATE SEQUENCE seq_registro_voluntario START WITH 6 INCREMENT BY 1;


-- ================================
-- #     CRIAÇÃO DE TABELAS       #
-- ================================

-- USUARIO
CREATE TABLE USUARIO (
    id_usuario INTEGER PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    cpf VARCHAR2(20) NOT NULL,
    email VARCHAR2(255) NOT NULL,
    telefone VARCHAR2(20),
    tipo_usuario VARCHAR2(20),
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT usuario_email_unique UNIQUE (email),
    CONSTRAINT usuario_cpf_unique UNIQUE (cpf)
);

-- LOGIN
CREATE TABLE LOGIN (
    id_login INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR2(255) NOT NULL,
    senha VARCHAR2(255) NOT NULL,
    status VARCHAR2(50) DEFAULT 'ATIVO' NOT NULL,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usuario_id INTEGER NOT NULL,
    CONSTRAINT login_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE CASCADE,
    CONSTRAINT login_email_unique UNIQUE (email)
);

CREATE TABLE AREA_DESASTRE (
    id_desastre INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo_desastre VARCHAR2(100) NOT NULL,
    descricao VARCHAR2(4000),
    prioridade_resposta VARCHAR2(50),
    status_emergencia VARCHAR2(50),
    latitude NUMBER(9,6),
    longitude NUMBER(9,6),
    data_ocorrencia TIMESTAMP,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP
);


-- CAMPANHA_HUMANITARIA
CREATE TABLE CAMPANHA_HUMANITARIA (
    id_campanha INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    descricao VARCHAR2(4000) NOT NULL,
    status_campanha VARCHAR2(50),
    publico_alvo VARCHAR2(4000),
    tipo_campanha VARCHAR2(100),
    responsavel VARCHAR2(100),
    data_inicio DATE,
    data_fim DATE,
    usuario_id INTEGER,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT campanha_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL
);

-- LOCALIZACAO_REGISTRADA
CREATE TABLE LOCALIZACAO_REGISTRADA (
    id_localizacao INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tipo_local VARCHAR2(100) NOT NULL,
    risco_area VARCHAR2(50) NOT NULL,
    latitude NUMBER(10,6) NOT NULL,
    longitude NUMBER(10,6) NOT NULL,
    endereco VARCHAR2(4000),
    data_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP NOT NULL,
    usuario_id INTEGER,
    CONSTRAINT fk_localizacao_usuario FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL
);

-- REGISTRO_VOLUNTARIO
CREATE TABLE REGISTRO_VOLUNTARIO (
    id_voluntario INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(100) NOT NULL,
    telefone VARCHAR2(20) NOT NULL,
    email VARCHAR2(255) NOT NULL,
    tipo_ajuda VARCHAR2(100) NOT NULL,
    disponibilidade VARCHAR2(50) NOT NULL,
    cep VARCHAR2(20),
    endereco VARCHAR2(255),
    numero VARCHAR2(20),
    bairro VARCHAR2(100),
    cidade VARCHAR2(100),
    estado VARCHAR2(50),
    observacoes VARCHAR2(500),
    data_registro TIMESTAMP NOT NULL,
    usuario_id INTEGER,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT voluntario_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL
);


-- NOTIFICACAO
CREATE TABLE NOTIFICACAO (
    id_notificacao INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    mensagem VARCHAR2(4000) NOT NULL,
    canal_envio VARCHAR2(100),
    data_envio TIMESTAMP WITH TIME ZONE,
    status_notificacao VARCHAR2(50),
    usuario_id INTEGER,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT notificacao_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL
);

-- RELATO
CREATE TABLE RELATO (
    id_relato INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nome VARCHAR2(255) NOT NULL,
    titulo VARCHAR2(255) NOT NULL,
    mensagem VARCHAR2(4000) NOT NULL,
    endereco VARCHAR2(500),
    cidade VARCHAR2(100) NOT NULL,
    estado VARCHAR2(50) NOT NULL,
    tipo_desastre VARCHAR2(100) NOT NULL,
    tipo_desastre_outro VARCHAR2(255),
    urgencia VARCHAR2(50),
    status VARCHAR2(50),
    usuario_id INTEGER,
    area_desastre_id INTEGER,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT relato_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL,
    CONSTRAINT relato_desastre_fk FOREIGN KEY (area_desastre_id)
        REFERENCES AREA_DESASTRE(id_desastre) ON DELETE SET NULL
);


-- REGISTRO_DOACAO
CREATE TABLE REGISTRO_DOACAO (
    id_doacao INTEGER PRIMARY KEY,
    tipo_doacao VARCHAR2(100) NOT NULL,
    quantidade_doacao INTEGER NOT NULL,
    descricao VARCHAR2(4000),
    destino_doacao VARCHAR2(4000),
    data_doacao TIMESTAMP,
    status VARCHAR2(50),
    usuario_id INTEGER,
    area_desastre_id INTEGER,
    campanha_humanitaria_id INTEGER,
    data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    data_atualizacao TIMESTAMP,
    CONSTRAINT doacao_usuario_fk FOREIGN KEY (usuario_id)
        REFERENCES USUARIO(id_usuario) ON DELETE SET NULL,
    CONSTRAINT doacao_desastre_fk FOREIGN KEY (area_desastre_id)
        REFERENCES AREA_DESASTRE(id_desastre) ON DELETE SET NULL,
    CONSTRAINT doacao_campanha_fk FOREIGN KEY (campanha_humanitaria_id)
        REFERENCES CAMPANHA_HUMANITARIA(id_campanha) ON DELETE SET NULL
);


-- =============================================
--#  TRIGGERS DE AUTOINCREMENTO E TIMESTAMP  #
-- =============================================

-- TRIGGER USUARIO
CREATE OR REPLACE TRIGGER trg_usuario
  BEFORE INSERT OR UPDATE ON USUARIO
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_usuario IS NULL THEN
      :NEW.id_usuario := seq_usuario.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
  END IF;

  IF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/

-- TRIGGER AREA_DESASTRE
CREATE OR REPLACE TRIGGER trg_bi_area_desastre
BEFORE INSERT ON AREA_DESASTRE
FOR EACH ROW
BEGIN
  :NEW.data_criacao := CURRENT_TIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER trg_bu_area_desastre
BEFORE UPDATE ON AREA_DESASTRE
FOR EACH ROW
BEGIN
  :NEW.data_atualizacao := CURRENT_TIMESTAMP;
END;
/


-- TRIGGER CAMPANHA_HUMANITARIA
CREATE OR REPLACE TRIGGER trg_campanha_humanitaria
  BEFORE INSERT OR UPDATE ON CAMPANHA_HUMANITARIA
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_campanha IS NULL THEN
      :NEW.id_campanha := seq_campanha_humanitaria.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
  END IF;

  IF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/

-- TRIGGER LOGIN
CREATE OR REPLACE TRIGGER trg_login
  BEFORE INSERT OR UPDATE ON LOGIN
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_login IS NULL THEN
      :NEW.id_login := seq_login.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
  END IF;

  IF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/

-- TRIGGER LOCALIZACAO_REGISTRADA
CREATE OR REPLACE TRIGGER trg_localizacao_registrada
  BEFORE INSERT OR UPDATE ON LOCALIZACAO_REGISTRADA
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_localizacao IS NULL THEN
      :NEW.id_localizacao := seq_localizacao_registrada.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
    :NEW.data_registro := CURRENT_TIMESTAMP;
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  ELSIF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/


-- TRIGGER REGISTRO_VOLUNTARIO
CREATE OR REPLACE TRIGGER trg_registro_voluntario
  BEFORE INSERT OR UPDATE ON REGISTRO_VOLUNTARIO
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_voluntario IS NULL THEN
      :NEW.id_voluntario := seq_registro_voluntario.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
    :NEW.data_registro := CURRENT_TIMESTAMP;
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  ELSIF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/


-- TRIGGER NOTIFICACAO
CREATE OR REPLACE TRIGGER trg_bi_notificacao
  BEFORE INSERT ON NOTIFICACAO
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF :NEW.id_notificacao IS NULL THEN
    :NEW.id_notificacao := seq_notificacao.NEXTVAL;
  END IF;
  :NEW.data_criacao := CURRENT_TIMESTAMP;
END;
/

-- TRIGGER RELATO
CREATE OR REPLACE TRIGGER trg_bi_relato
  BEFORE INSERT ON RELATO
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF :NEW.id_relato IS NULL THEN
    :NEW.id_relato := seq_relato.NEXTVAL;
  END IF;
  :NEW.data_criacao := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER trg_bu_relato
  BEFORE UPDATE ON RELATO
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  :NEW.data_atualizacao := CURRENT_TIMESTAMP;
END;
/

-- TRIGGER REGISTRO_DOACAO
CREATE OR REPLACE TRIGGER trg_biu_registro_doacao
  BEFORE INSERT OR UPDATE ON REGISTRO_DOACAO
  REFERENCING NEW AS NEW OLD AS OLD
  FOR EACH ROW
BEGIN
  IF INSERTING THEN
    IF :NEW.id_doacao IS NULL THEN
      :NEW.id_doacao := seq_registro_doacao.NEXTVAL;
    END IF;
    :NEW.data_criacao := CURRENT_TIMESTAMP;
  END IF;

  IF UPDATING THEN
    :NEW.data_atualizacao := CURRENT_TIMESTAMP;
  END IF;
END;
/







-- =====================================
-- #      INSERTS (DADOS DE TESTE)     #
-- =====================================

--USUARIO(5)--
INSERT INTO USUARIO (id_usuario, nome, cpf, email, telefone, tipo_usuario, data_criacao, data_atualizacao)
VALUES (1, 'Ana Silva', '123.456.789-00', 'ana.silva@example.com', '(11) 99999-1111', 'VITIMA', SYSDATE, SYSDATE);

INSERT INTO USUARIO (id_usuario, nome, cpf, email, telefone, tipo_usuario, data_criacao, data_atualizacao)
VALUES (2, 'Carlos Pereira', '987.654.321-00', 'carlos.pereira@ong.org', '(21) 98888-2222', 'DOADOR', SYSDATE, SYSDATE);

INSERT INTO USUARIO (id_usuario, nome, cpf, email, telefone, tipo_usuario, data_criacao, data_atualizacao)
VALUES (3, 'Fernanda Costa', '111.222.333-44', 'fernanda.costa@resgate.gov', '(31) 97777-3333', 'RESGATE', SYSDATE, SYSDATE);

INSERT INTO USUARIO (id_usuario, nome, cpf, email, telefone, tipo_usuario, data_criacao, data_atualizacao)
VALUES (4, 'João Almeida', '555.666.777-88', 'joao.almeida@gestao.org', '(41) 96666-4444', 'GESTOR', SYSDATE, SYSDATE);

INSERT INTO USUARIO (id_usuario, nome, cpf, email, telefone, tipo_usuario, data_criacao, data_atualizacao)
VALUES (5, 'Mariana Souza', '999.888.777-66', 'mariana.souza@voluntarios.org', '(51) 95555-5555', 'VOLUNTARIO', SYSDATE, SYSDATE);


--AREA_DESASTRE(5)--
INSERT INTO AREA_DESASTRE (id_desastre, tipo_desastre, descricao, prioridade_resposta, status_emergencia, latitude, longitude, data_ocorrencia, data_criacao, data_atualizacao)
VALUES (1, 'Enchente', 'Inundações causadas por fortes chuvas na zona urbana.', 'ALTA', 'ATIVA', -23.550520, -46.633308, TO_DATE('2025-05-25', 'YYYY-MM-DD'), SYSDATE, SYSDATE);

INSERT INTO AREA_DESASTRE (id_desastre, tipo_desastre, descricao, prioridade_resposta, status_emergencia, latitude, longitude, data_ocorrencia, data_criacao, data_atualizacao)
VALUES (2, 'Deslizamento de terra', 'Deslizamento em encosta de morro afetando residências.', 'CRITICA', 'EM_ANDAMENTO', -22.906847, -43.172896, TO_DATE('2025-05-27', 'YYYY-MM-DD'), SYSDATE, SYSDATE);

INSERT INTO AREA_DESASTRE (id_desastre, tipo_desastre, descricao, prioridade_resposta, status_emergencia, latitude, longitude, data_ocorrencia, data_criacao, data_atualizacao)
VALUES (3, 'Incêndio florestal', 'Fogo de grandes proporções em reserva ambiental.', 'ALTA', 'CONTIDO', -19.916681, -43.934493, TO_DATE('2025-05-20', 'YYYY-MM-DD'), SYSDATE, SYSDATE);

INSERT INTO AREA_DESASTRE (id_desastre, tipo_desastre, descricao, prioridade_resposta, status_emergencia, latitude, longitude, data_ocorrencia, data_criacao, data_atualizacao)
VALUES (4, 'Inundação', 'Chuvas intensas causaram alagamentos em diversas vias da zona leste de São Paulo.', 'ALTA', 'EM_ANDAMENTO', -23.550520, -46.633308, TO_DATE('2025-05-15', 'YYYY-MM-DD'), SYSDATE, SYSDATE);

INSERT INTO AREA_DESASTRE (id_desastre, tipo_desastre, descricao, prioridade_resposta, status_emergencia, latitude, longitude, data_ocorrencia, data_criacao, data_atualizacao)
VALUES (5, 'Tempestade severa', 'Chuvas intensas com ventos fortes e queda de árvores.', 'ALTA', 'ATIVA', -8.047562, -34.877003, TO_DATE('2025-05-28', 'YYYY-MM-DD'), SYSDATE, SYSDATE);


--CAMPANHA_HUMANITARIA(5)--
INSERT INTO CAMPANHA_HUMANITARIA (id_campanha, descricao, status_campanha, publico_alvo, tipo_campanha, responsavel, data_inicio, data_fim, usuario_id)
VALUES (1, 'Campanha de arrecadação para vítimas do terremoto', 'ATIVA', 'Famílias afetadas pelo terremoto', 'ARRECADACAO', 'Carlos Pereira', TO_DATE('2025-05-02', 'YYYY-MM-DD'), NULL, 2);

INSERT INTO CAMPANHA_HUMANITARIA (id_campanha, descricao, status_campanha, publico_alvo, tipo_campanha, responsavel, data_inicio, data_fim, usuario_id)
VALUES (2, 'Campanha de voluntariado para incêndios', 'ENCERRADA', 'Voluntários para combate a incêndios', 'VOLUNTARIADO', 'Mariana Souza', TO_DATE('2025-04-26', 'YYYY-MM-DD'), TO_DATE('2025-05-10', 'YYYY-MM-DD'), 5);

INSERT INTO CAMPANHA_HUMANITARIA (id_campanha, descricao, status_campanha, publico_alvo, tipo_campanha, responsavel, data_inicio, data_fim, usuario_id)
VALUES (3, 'Campanha para fornecimento de abrigos temporários', 'ATIVA', 'Vítimas de furacão', 'LOGISTICA', 'João Almeida', TO_DATE('2025-05-11', 'YYYY-MM-DD'), NULL, 4);

INSERT INTO CAMPANHA_HUMANITARIA (id_campanha, descricao, status_campanha, publico_alvo, tipo_campanha, responsavel, data_inicio, data_fim, usuario_id)
VALUES (4, 'Campanha de doação de alimentos para inundação', 'PLANEJAMENTO', 'Comunidades atingidas por inundação', 'ARRECADACAO', 'Carlos Pereira', TO_DATE('2025-05-16', 'YYYY-MM-DD'), NULL, 2);

INSERT INTO CAMPANHA_HUMANITARIA (id_campanha, descricao, status_campanha, publico_alvo, tipo_campanha, responsavel, data_inicio, data_fim, usuario_id)
VALUES (5, 'Campanha de avaliação de danos', 'ATIVA', 'Equipes de resgate e avaliação', 'AVALIACAO', 'Fernanda Costa', TO_DATE('2025-05-21', 'YYYY-MM-DD'), NULL, 3);


-- LOGIN(5) --
INSERT INTO LOGIN (id_login, email, senha, status, usuario_id)
VALUES (1, 'ana.silva@example.com', 'senhaAna123', 'ATIVO', 1);

INSERT INTO LOGIN (id_login, email, senha, status, usuario_id)
VALUES (2, 'carlos.pereira@ong.org', 'senhaCarlos123', 'ATIVO', 2);

INSERT INTO LOGIN (id_login, email, senha, status, usuario_id)
VALUES (3, 'fernanda.costa@resgate.gov', 'senhaFernanda123', 'ATIVO', 3);

INSERT INTO LOGIN (id_login, email, senha, status, usuario_id)
VALUES (4, 'joao.almeida@gestao.org', 'senhaJoao123', 'ATIVO', 4);

INSERT INTO LOGIN (id_login, email, senha, status, usuario_id)
VALUES (5, 'mariana.souza@voluntarios.org', 'senhaMariana123', 'ATIVO', 5);


--LOCALIZACAO_REGISTRADA(5)--
INSERT INTO LOCALIZACAO_REGISTRADA (id_localizacao, tipo_local, risco_area, latitude, longitude, endereco, usuario_id)
VALUES (1, 'Abrigo Temporário', 'Médio', -23.550520, -46.633308, 'Rua da Esperança, 123 - São Paulo/SP', 1);

INSERT INTO LOCALIZACAO_REGISTRADA (id_localizacao, tipo_local, risco_area, latitude, longitude, endereco, usuario_id)
VALUES (2, 'Posto de Saúde', 'Baixo', -22.906847, -43.172896, 'Avenida Central, 456 - Rio de Janeiro/RJ', 2);

INSERT INTO LOCALIZACAO_REGISTRADA (id_localizacao, tipo_local, risco_area, latitude, longitude, endereco, usuario_id)
VALUES (3, 'Ponto de Encontro', 'Alto', -19.916681, -43.934493, 'Praça da Liberdade, 789 - Belo Horizonte/MG', 3);

INSERT INTO LOCALIZACAO_REGISTRADA (id_localizacao, tipo_local, risco_area, latitude, longitude, endereco, usuario_id)
VALUES (4, 'Centro de Distribuição', 'Médio', -3.731862, -38.526669, 'Rua das Flores, 101 - Fortaleza/CE', 4);

INSERT INTO LOCALIZACAO_REGISTRADA (id_localizacao, tipo_local, risco_area, latitude, longitude, endereco, usuario_id)
VALUES (5, 'Área de Risco', 'Crítico', -12.971389, -38.501389, 'Travessa da Resistência, 202 - Salvador/BA', 5);


-- REGISTRO_VOLUNTARIO
INSERT INTO REGISTRO_VOLUNTARIO (id_voluntario, nome, telefone, email, tipo_ajuda, disponibilidade, cep, endereco, numero, bairro, cidade, estado, observacoes, data_registro, data_criacao, data_atualizacao, usuario_id)
VALUES (1, 'Mariana Souza', '(51) 95555-5555', 'mariana.souza@email.com', 'Logística', 'Disponível', '90000-000', 'Rua das Flores', '123', 'Centro', 'Porto Alegre', 'RS', 'Disponível para plantões noturnos', TO_DATE('2025-05-04', 'YYYY-MM-DD'), SYSDATE, SYSDATE, 5);

INSERT INTO REGISTRO_VOLUNTARIO (id_voluntario, nome, telefone, email, tipo_ajuda, disponibilidade, cep, endereco, numero, bairro, cidade, estado, observacoes, data_registro, data_criacao, data_atualizacao, usuario_id)
VALUES (2, 'Paulo Lima', '(41) 94444-6666', 'paulo.lima@email.com', 'Saúde', 'Indisponível', '80000-000', 'Av. Brasil', '456', 'Centro', 'Curitiba', 'PR', 'Só disponível nos fins de semana', TO_DATE('2025-05-05', 'YYYY-MM-DD'), SYSDATE, SYSDATE, 1);

INSERT INTO REGISTRO_VOLUNTARIO (id_voluntario, nome, telefone, email, tipo_ajuda, disponibilidade, cep, endereco, numero, bairro, cidade, estado, observacoes, data_registro, data_criacao, data_atualizacao, usuario_id)
VALUES (3, 'Carlos Nunes', '(31) 93333-7777', 'carlos.nunes@email.com', 'Resgate', 'Disponível', '30100-000', 'Rua Afonso Pena', '789', 'Centro', 'Belo Horizonte', 'MG', 'Prefere trabalho ao ar livre', TO_DATE('2025-05-06', 'YYYY-MM-DD'), SYSDATE, SYSDATE, 2);

INSERT INTO REGISTRO_VOLUNTARIO (id_voluntario, nome, telefone, email, tipo_ajuda, disponibilidade, cep, endereco, numero, bairro, cidade, estado, observacoes, data_registro, data_criacao, data_atualizacao, usuario_id)
VALUES (4, 'Renata Oliveira', '(21) 92222-8888', 'renata.oliveira@email.com', 'Comunicação', 'Disponível', '20000-000', 'Rua das Laranjeiras', '321', 'Laranjeiras', 'Rio de Janeiro', 'RJ', 'Experiência em mídias sociais', TO_DATE('2025-05-07', 'YYYY-MM-DD'), SYSDATE, SYSDATE, 3);

INSERT INTO REGISTRO_VOLUNTARIO (id_voluntario, nome, telefone, email, tipo_ajuda, disponibilidade, cep, endereco, numero, bairro, cidade, estado, observacoes, data_registro, data_criacao, data_atualizacao, usuario_id)
VALUES (5, 'Lucas Fernandes', '(19) 91111-9999', 'lucas.fernandes@email.com', 'Infraestrutura', 'Disponível', '13000-000', 'Av. Brasil', '654', 'Centro', 'Campinas', 'SP', 'Disponível para emergências', TO_DATE('2025-05-08', 'YYYY-MM-DD'), SYSDATE, SYSDATE, 4);


--NOTIFICACAO(4)--
INSERT INTO NOTIFICACAO (id_notificacao, mensagem, canal_envio, data_envio, status_notificacao, data_criacao, data_atualizacao, usuario_id)
VALUES (1, 'Nova doação recebida para campanha de terremoto', 'EMAIL', TO_TIMESTAMP('2025-05-05 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'ENVIADA', SYSDATE, SYSDATE, 2);

INSERT INTO NOTIFICACAO (id_notificacao, mensagem, canal_envio, data_envio, status_notificacao, data_criacao, data_atualizacao, usuario_id)
VALUES (2, 'Alerta de incêndio controlado na área de risco', 'SMS', TO_TIMESTAMP('2025-04-28 15:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'ENVIADA', SYSDATE, SYSDATE, 3);

INSERT INTO NOTIFICACAO (id_notificacao, mensagem, canal_envio, data_envio, status_notificacao, data_criacao, data_atualizacao, usuario_id)
VALUES (3, 'Convocação de voluntários para furacão', 'APP', TO_TIMESTAMP('2025-05-12 08:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'PENDENTE', SYSDATE, SYSDATE, 5);

INSERT INTO NOTIFICACAO (id_notificacao, mensagem, canal_envio, data_envio, status_notificacao, data_criacao, data_atualizacao, usuario_id)
VALUES (4, 'Atualização da campanha de alimentos para inundação', 'EMAIL', TO_TIMESTAMP('2025-05-17 12:00:00', 'YYYY-MM-DD HH24:MI:SS'), 'ENVIADA', SYSDATE, SYSDATE, 2);

INSERT INTO NOTIFICACAO (id_notificacao, mensagem, canal_envio, data_envio, status_notificacao, data_criacao, data_atualizacao, usuario_id)
VALUES (5, 'Deslizamento reportado: autoridades acionadas', 'SMS', TO_TIMESTAMP('2025-05-25 09:45:00', 'YYYY-MM-DD HH24:MI:SS'), 'ENVIADA', SYSDATE, SYSDATE, 1);



--RELATO(5)--
INSERT INTO RELATO (id_relato, nome, titulo, mensagem, endereco, cidade, estado, tipo_desastre, tipo_desastre_outro, urgencia, status, data_criacao, usuario_id, area_desastre_id)
VALUES (1, 'João Silva', 'Desabamento na região central', 'Desabamento de casas na região central', 'Rua Principal, 123', 'São Paulo', 'SP', 'Terremoto', NULL, 'ALTA', 'ABERTO', SYSDATE, 1, 1);

INSERT INTO RELATO (id_relato, nome, titulo, mensagem, endereco, cidade, estado, tipo_desastre, tipo_desastre_outro, urgencia, status, data_criacao, usuario_id, area_desastre_id)
VALUES (2, 'Maria Oliveira', 'Incêndio na floresta estadual', 'Fumaça densa e focos de incêndio controlados', 'Área 45, Floresta Estadual', 'Rio de Janeiro', 'RJ', 'Incêndio Florestal', NULL, 'MÉDIA', 'FECHADO', SYSDATE, 3, 2);

INSERT INTO RELATO (id_relato, nome, titulo, mensagem, endereco, cidade, estado, tipo_desastre, tipo_desastre_outro, urgencia, status, data_criacao, usuario_id, area_desastre_id)
VALUES (3, 'Carlos Souza', 'Inundação em bairros periféricos', 'Inundação parcial em bairros periféricos', 'Rua das Flores, Bairro Novo Horizonte', 'Brasília', 'DF', 'Inundação', NULL, 'MÉDIA', 'EM ANÁLISE', SYSDATE, 1, 4);

INSERT INTO RELATO (id_relato, nome, titulo, mensagem, endereco, cidade, estado, tipo_desastre, tipo_desastre_outro, urgencia, status, data_criacao, usuario_id, area_desastre_id)
VALUES (4, 'Ana Lima', 'Árvores caídas e estradas bloqueadas', 'Árvores caídas e estradas bloqueadas', 'Costa Leste, Miami Street', 'Miami', 'FL', 'Furacão', NULL, 'ALTA', 'ABERTO', SYSDATE, 1, 3);

INSERT INTO RELATO (id_relato, nome, titulo, mensagem, endereco, cidade, estado, tipo_desastre, tipo_desastre_outro, urgencia, status, data_criacao, usuario_id, area_desastre_id)
VALUES (5, 'Pedro Martins', 'Deslizamento em zona rural', 'Deslizamento afetando residências', 'Zona Rural, Fazenda Boa Vista', 'Belo Horizonte', 'MG', 'Deslizamento', NULL, 'ALTA', 'ABERTO', SYSDATE, 1, 5);


--REGISTRO_DOACAO(5)--
INSERT INTO REGISTRO_DOACAO (id_doacao, tipo_doacao, quantidade_doacao, descricao, destino_doacao, data_doacao, status, data_criacao, data_atualizacao, usuario_id, area_desastre_id, campanha_humanitaria_id)
VALUES (1, 'Água Potável', 1000, 'Garrafas de água mineral', 'Abrigo Temporário SP', TO_DATE('2025-05-06', 'YYYY-MM-DD'), 'ENTREGUE', SYSDATE, SYSDATE, 2, 1, 1);

INSERT INTO REGISTRO_DOACAO (id_doacao, tipo_doacao, quantidade_doacao, descricao, destino_doacao, data_doacao, status, data_criacao, data_atualizacao, usuario_id, area_desastre_id, campanha_humanitaria_id)
VALUES (2, 'Alimentos Não Perecíveis', 500, 'Cestas básicas', 'Centro de Distribuição RJ', TO_DATE('2025-04-29', 'YYYY-MM-DD'), 'EM TRANSITO', SYSDATE, SYSDATE, 2, 2, 4);

INSERT INTO REGISTRO_DOACAO (id_doacao, tipo_doacao, quantidade_doacao, descricao, destino_doacao, data_doacao, status, data_criacao, data_atualizacao, usuario_id, area_desastre_id, campanha_humanitaria_id)
VALUES (3, 'Medicamentos', 200, 'Kit de primeiros socorros', 'Posto de Saúde Local', TO_DATE('2025-05-13', 'YYYY-MM-DD'), 'ENTREGUE', SYSDATE, SYSDATE, 2, 3, 3);

INSERT INTO REGISTRO_DOACAO (id_doacao, tipo_doacao, quantidade_doacao, descricao, destino_doacao, data_doacao, status, data_criacao, data_atualizacao, usuario_id, area_desastre_id, campanha_humanitaria_id)
VALUES (4, 'Cobertores', 300, 'Cobertores para abrigo', 'Abrigo Temporário Brasília', TO_DATE('2025-05-18', 'YYYY-MM-DD'), 'AGUARDANDO', SYSDATE, SYSDATE, 2, 4, 4);

INSERT INTO REGISTRO_DOACAO (id_doacao, tipo_doacao, quantidade_doacao, descricao, destino_doacao, data_doacao, status, data_criacao, data_atualizacao, usuario_id, area_desastre_id, campanha_humanitaria_id)
VALUES (5, 'Roupas', 150, 'Roupas de inverno para vítimas', 'Abrigo Temporário BH', TO_DATE('2025-05-23', 'YYYY-MM-DD'), 'ENTREGUE', SYSDATE, SYSDATE, 2, 5, 1);



-- ##################################################
-- #            CONSULTAS SQL COMPLEXAS             #
-- #  JOIN | GROUP BY | HAVING | SUBQUERY | ORDER BY #
-- ##################################################


-- 1° Total de doações por campanha --
SELECT c.id_campanha, c.descricao, COUNT(d.id_doacao) AS total_doacoes
FROM CAMPANHA_HUMANITARIA c
JOIN REGISTRO_DOACAO d ON c.id_campanha = d.campanha_humanitaria_id
GROUP BY c.id_campanha, c.descricao
HAVING COUNT(d.id_doacao) > 1
ORDER BY total_doacoes DESC;


-- 2° Lista de usuários com login ativo e localização recente --
SELECT
    u.id_usuario,
    u.nome,
    n.canal_envio,
    n.status_notificacao,
    COUNT(n.id_notificacao) AS total_notificacoes
FROM NOTIFICACAO n
JOIN USUARIO u ON n.usuario_id = u.id_usuario
GROUP BY u.id_usuario, u.nome, n.canal_envio, n.status_notificacao
ORDER BY total_notificacoes DESC;


-- 3° Total de notificações enviadas por usuário por canal e status --
SELECT
    u.id_usuario,
    u.nome,
    l.email,
    lr.data_registro
FROM USUARIO u
JOIN LOGIN l ON l.usuario_id = u.id_usuario
JOIN LOCALIZACAO_REGISTRADA lr ON lr.USUARIO_ID = u.id_usuario
WHERE l.status = 'ATIVO'
  AND EXISTS (
    SELECT 1
    FROM LOCALIZACAO_REGISTRADA lr2
    WHERE lr2.USUARIO_ID = u.id_usuario
      AND lr2.data_registro > DATE '2025-05-01'
)
ORDER BY lr.data_registro DESC;


-- 4° Usuários que fizeram doações para campanhas com mais de 10 doações --
SELECT DISTINCT u.id_usuario, u.nome
FROM USUARIO u
WHERE EXISTS (
    SELECT 1
    FROM REGISTRO_DOACAO d
    JOIN CAMPANHA_HUMANITARIA c ON c.id_campanha = d.campanha_humanitaria_id
    WHERE d.usuario_id = u.id_usuario
      AND c.id_campanha IN (
          SELECT campanha_humanitaria_id
          FROM REGISTRO_DOACAO
          GROUP BY campanha_humanitaria_id
          HAVING COUNT(id_doacao) > 10
      )
);


-- 5° Média da quantidade de doações por usuário em campanhas ativas --
SELECT u.id_usuario, u.nome, AVG(d.quantidade_doacao) AS media_doacoes
FROM USUARIO u
JOIN REGISTRO_DOACAO d ON d.usuario_id = u.id_usuario
JOIN CAMPANHA_HUMANITARIA c ON c.id_campanha = d.campanha_humanitaria_id
WHERE c.status_campanha = 'ATIVA'  -- assumindo que status_campanha marca campanhas ativas
GROUP BY u.id_usuario, u.nome
HAVING COUNT(d.id_doacao) > 0;






-- ##############################
-- #      CONSULTAS SIMPLES     #
-- ##############################



SELECT * FROM USUARIO;
SELECT * FROM LOGIN;
SELECT * FROM LOCALIZACAO_REGISTRADA;
SELECT * FROM REGISTRO_VOLUNTARIO;
SELECT * FROM REGISTRO_DOACAO;
SELECT * FROM AREA_DESASTRE;
SELECT * FROM RELATO;
SELECT * FROM NOTIFICACAO;
SELECT * FROM CAMPANHA_HUMANITARIA;



-- ================================
-- CONSULTAS SQL COMPLEMENTARES
-- ================================

-- ================================
-- #         ORDER BY            #
-- ================================

-- Listar usuários por nome em ordem alfabética
SELECT id_usuario, nome, tipo_usuario
FROM USUARIO
ORDER BY nome ASC;

-- Listar áreas de desastre pela data de ocorrência, da mais antiga para a mais recente
SELECT id_desastre, tipo_desastre, data_ocorrencia
FROM AREA_DESASTRE
ORDER BY data_ocorrencia ASC;


-- ========================================
-- #     FUNÇÕES DE AGREGAÇÃO (EXTRA)     #
-- ========================================

-- Soma total de quantidades de doações feitas
SELECT SUM(quantidade_doacao) AS total_quantidade_doada
FROM REGISTRO_DOACAO;

-- Média de quantidade doada por doação
SELECT AVG(quantidade_doacao) AS media_quantidade_doada
FROM REGISTRO_DOACAO;


-- ================================
-- #          GROUP BY            #
-- ================================
-- Contar o número de campanhas por status
SELECT status_campanha, COUNT(*) AS total_campanhas
FROM CAMPANHA_HUMANITARIA
GROUP BY status_campanha;

-- Contar número de relatos por tipo de desastre
SELECT tipo_desastre, COUNT(*) AS total_relatos
FROM RELATO
GROUP BY tipo_desastre;


-- ================================
-- #          SUBQUERIES          #
-- ================================

-- Usuários que já fizeram doações
SELECT id_usuario, nome
FROM USUARIO u
WHERE EXISTS (
  SELECT 1 FROM REGISTRO_DOACAO d WHERE d.usuario_id = u.id_usuario
);

-- Campanhas ativas que têm doações
SELECT id_campanha, descricao
FROM CAMPANHA_HUMANITARIA c
WHERE status_campanha = 'ATIVA'
  AND EXISTS (
    SELECT 1 FROM REGISTRO_DOACAO d WHERE d.campanha_humanitaria_id = c.id_campanha
  );



-- ================================
-- #             JOIN            #
-- ================================

-- Listar doações com nome do usuário doador e tipo de desastre relacionado
SELECT RD.id_doacao, U.nome AS doador, AD.tipo_desastre, RD.quantidade_doacao
FROM REGISTRO_DOACAO RD
JOIN USUARIO U ON RD.usuario_id = U.id_usuario
JOIN AREA_DESASTRE AD ON RD.area_desastre_id = AD.id_desastre;

-- Listar campanhas com nome do responsável (usuário)
SELECT C.id_campanha, C.descricao, U.nome AS responsavel
FROM CAMPANHA_HUMANITARIA C
JOIN USUARIO U ON C.usuario_id = U.id_usuario;



-- ================================
-- #            WHERE            #
-- ================================
-- Listar relatos com urgência alta e status aberto
SELECT id_relato, mensagem, urgencia, status
FROM RELATO
WHERE urgencia = 'ALTA' AND status = 'ABERTO';


-- Listar notificações enviadas por SMS que foram enviadas com sucesso
SELECT id_notificacao, mensagem, canal_envio, status_notificacao
FROM NOTIFICACAO
WHERE canal_envio = 'SMS' AND status_notificacao = 'ENVIADA';




